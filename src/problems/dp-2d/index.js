import { validParenthesisStringMemoized } from "./valid-parenthesis-string";
import { countPalindromicSubstrings } from "./count-palindromic-substrings";
import { longestPalindromicSubstring } from "./longest-palindromic-substrings";
import { LIS } from "./longest-increasing-subsequence";
import { partitionEqualSubsetSums } from "./partition-equal-subset-sum";
import { threeSumClosest, threeSumClosestDP } from "./three-some-closest";
import { uniquePaths } from "./unique-paths";
import { longestCommonSubsequence } from "./longest-common-subsequence";
import { bestTimeToBuyStocksCooldown } from "./best-time-to-buy-stocks-cooldown";
import { targetSumExpression } from "./target-sum-expression";
import { interleaveString } from "./string-interleaving";
import { editDistance } from "./edit-distance";
import { maximizeMinSum } from "./split-array-maximize-min-sum";
import { longestIncreasingPathMatrix } from "./longest-increasing-path-in-matrix";
import { distinctSubsequences } from "./distinct-subsequences";
import { findMaxCoinsByBurstingBalloons } from "./burst-ballons";

// console.log(validParenthesisStringMemoized('()))'));
// console.log(countPalindromicSubstrings('aaa'));
// console.log(longestPalindromicSubstring('cbbd'));
// console.log(LIS([10,9,2,5,3,7,101,18]));
// console.log(partitionEqualSubsetSums([1,5,11,5]));
// console.log(threeSumClosestDP([-1,2,1,-4], 2));
// console.log(uniquePaths(3, 7));
// console.log(longestCommonSubsequence('abced', 'aced'));
// console.log(bestTimeToBuyStocksCooldown([1,2,3,0,2]));
// console.log(targetSumExpression([1,1,1,1,1], 3));
// console.log(interleaveString('aabcc', 'dbbca', 'aadbbcbcac'));
// console.log(editDistance('intention', 'execution'));
// console.log(maximizeMinSum([6, 5, 3, 8, 9, 10, 4, 7, 10], 4));
// console.log(longestIncreasingPathMatrix([[3,4,5],[3,2,6],[2,2,1]]));
// console.log(distinctSubsequences('babgbag', 'bag'));
// console.log(findMaxCoinsByBurstingBalloons([3,1,5,8]));
